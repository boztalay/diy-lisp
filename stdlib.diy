;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

(define or
    (lambda (a b)
        (if a
            #t
            b)))

(define and
    (lambda (a b)
        (if a
            b
            #f)))

(define xor
    (lambda (a b)
        (if a
            (not b)
	    b)))

;; More comparators

(define >=
    (lambda (a b)
        (if (> a b)
            #t
            (eq a b))))

(define <=
    (lambda (a b)
        (if (> b a)
            #t
            (eq a b))))

(define <
    (lambda (a b)
        (if (> b a)
            (not (eq a b))
            #f)))

;; List operations

(define sum
    (lambda (list)
        (sum_helper list 0)))

(define sum_helper
    (lambda (list total)
        (if (empty list)
            total
            (sum_helper (tail list) (+ total (head list))))))

(define length
    (lambda (list)
        (length_helper list 0)))

(define length_helper
    (lambda (list len)
        (if (empty list)
            len
            (length_helper (tail list) (+ len 1)))))

(define append
    (lambda (list1 list2)
        (if (empty list1)
	    list2
	    (cons (head list1) (append (tail list1) list2)))))

(define filter
    (lambda (pred list)
    	(if (empty list)
		list
		(if (pred (head list))
			(cons (head list) (filter pred (tail list)))
			(filter pred (tail list))))))

(define map
	(lambda (func list)
		(if (empty list)
			list
			(cons (func (head list)) (map func (tail list))))))

(define reverse
	(lambda (list)
		(reverse_helper list '())))

(define reverse_helper
	(lambda (listToReverse reversedList)
		(if (empty listToReverse)
			reversedList
			(reverse_helper (tail listToReverse) (cons (head listToReverse) reversedList)))))

(define range
	(lambda (lower upper)
		(range_helper lower upper '())))

(define range_helper
	(lambda (lower upper list)
		(if (> lower upper)
			list
			(range_helper lower (- upper 1) (cons upper list)))))

(define sort
	(lambda (list)
		(if (empty list)
			list
			(sort_insert (head list) (sort (tail list))))))

(define sort_insert
	(lambda (toInsert list)
		(if (empty list)
			(cons toInsert '())
			(if (> (head list) toInsert)
				(cons toInsert list)
				(cons (head list) (sort_insert toInsert (tail list)))))))
